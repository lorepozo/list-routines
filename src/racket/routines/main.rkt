#lang racket
(provide routines)

(define routines (make-hash))
(define h null)
(define validate-params null)
(define example-params null)
(define examples null)


(let ()
  (local-require "add-k.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'add-k h)
)

(let ()
  (local-require "append-index-k.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'append-index-k h)
)

(let ()
  (local-require "append-k.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'append-k h)
)

(let ()
  (local-require "caesar-cipher-k-modulo-n.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'caesar-cipher-k-modulo-n h)
)

(let ()
  (local-require "count-head-in-tail.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'count-head-in-tail h)
)

(let ()
  (local-require "count-k.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'count-k h)
)

(let ()
  (local-require "dedup.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'dedup h)
)

(let ()
  (local-require "drop-k.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'drop-k h)
)

(let ()
  (local-require "dup.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'dup h)
)

(let ()
  (local-require "empty.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'empty h)
)

(let ()
  (local-require "evens.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'evens h)
)

(let ()
  (local-require "fibonacci.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'fibonacci h)
)

(let ()
  (local-require "has-head-in-tail.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'has-head-in-tail h)
)

(let ()
  (local-require "has-k.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'has-k h)
)

(let ()
  (local-require "head.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'head h)
)

(let ()
  (local-require "identify-geq-k.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'identify-geq-k h)
)

(let ()
  (local-require "identify-is-mod-k.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'identify-is-mod-k h)
)

(let ()
  (local-require "identify-is-prime.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'identify-is-prime h)
)

(let ()
  (local-require "identify-k.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'identify-k h)
)

(let ()
  (local-require "index-head.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'index-head h)
)

(let ()
  (local-require "index-k.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'index-k h)
)

(let ()
  (local-require "intersperse-k.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'intersperse-k h)
)

(let ()
  (local-require "is-evens.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'is-evens h)
)

(let ()
  (local-require "is-mod-k.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'is-mod-k h)
)

(let ()
  (local-require "is-odds.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'is-odds h)
)

(let ()
  (local-require "is-primes.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'is-primes h)
)

(let ()
  (local-require "is-squares.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'is-squares h)
)

(let ()
  (local-require "keep-mod-head.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'keep-mod-head h)
)

(let ()
  (local-require "keep-mod-k.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'keep-mod-k h)
)

(let ()
  (local-require "kth-largest.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'kth-largest h)
)

(let ()
  (local-require "kth-smallest.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'kth-smallest h)
)

(let ()
  (local-require "last.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'last h)
)

(let ()
  (local-require "len.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'len h)
)

(let ()
  (local-require "max.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'max h)
)

(let ()
  (local-require "min.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'min h)
)

(let ()
  (local-require "modulo-k.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'modulo-k h)
)

(let ()
  (local-require "mult-k.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'mult-k h)
)

(let ()
  (local-require "odds.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'odds h)
)

(let ()
  (local-require "pop.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'pop h)
)

(let ()
  (local-require "pow-base-k.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'pow-base-k h)
)

(let ()
  (local-require "pow-k.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'pow-k h)
)

(let ()
  (local-require "prepend-index-k.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'prepend-index-k h)
)

(let ()
  (local-require "prepend-k.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'prepend-k h)
)

(let ()
  (local-require "prime.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'prime h)
)

(let ()
  (local-require "product.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'product h)
)

(let ()
  (local-require "range.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'range h)
)

(let ()
  (local-require "remove-index-k.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'remove-index-k h)
)

(let ()
  (local-require "remove-mod-head.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'remove-mod-head h)
)

(let ()
  (local-require "remove-mod-k.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'remove-mod-k h)
)

(let ()
  (local-require "repeat-k.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'repeat-k h)
)

(let ()
  (local-require "repeat-many.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'repeat-many h)
)

(let ()
  (local-require "repeat.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'repeat h)
)

(let ()
  (local-require "replace-all-k-with-n.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'replace-all-k-with-n h)
)

(let ()
  (local-require "replace-all-with-index-k.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'replace-all-with-index-k h)
)

(let ()
  (local-require "replace-index-k-with-n.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'replace-index-k-with-n h)
)

(let ()
  (local-require "reverse.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'reverse h)
)

(let ()
  (local-require "rotate-k.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'rotate-k h)
)

(let ()
  (local-require "slice-k-n.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'slice-k-n h)
)

(let ()
  (local-require "sort.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'sort h)
)

(let ()
  (local-require "sum.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'sum h)
)

(let ()
  (local-require "tail.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'tail h)
)

(let ()
  (local-require "take-k.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'take-k h)
)

(let ()
  (local-require "uniq.rkt")
  (set! h (make-hash))
  (hash-set! h 'description description)
  (hash-set! h 'is-parametric is-parametric)
  (hash-set! h 'deps deps)
  (hash-set! h 'validate validate)
  (hash-set! h 'evaluate evaluate)
  (hash-set! h 'generate generate)
  (if is-parametric
      (begin
        (hash-set! h 'example-params example-params)
        (hash-set! h 'validate-params validate-params))
      (hash-set! h 'examples examples))
  (hash-set! routines 'uniq h)
)

